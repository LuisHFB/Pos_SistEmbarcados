
codeStruct.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009ae  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000769  00000000  00000000  00000bd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000277  00000000  00000000  0000133f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043f  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000135  00000000  00000000  00001a7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 68 00 	call	0xd0	; 0xd0 <main>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZNK4Data7CompareERKS_>:
	   return (this->Compare(r2)==0);
}

	
void Data::data_imprime(/*const Data *this */) const
{
  80:	dc 01       	movw	r26, r24
  82:	fb 01       	movw	r30, r22
  84:	12 96       	adiw	r26, 0x02	; 2
  86:	2d 91       	ld	r18, X+
  88:	3c 91       	ld	r19, X
  8a:	13 97       	sbiw	r26, 0x03	; 3
  8c:	82 81       	ldd	r24, Z+2	; 0x02
  8e:	93 81       	ldd	r25, Z+3	; 0x03
  90:	28 17       	cp	r18, r24
  92:	39 07       	cpc	r19, r25
  94:	89 f0       	breq	.+34     	; 0xb8 <_ZNK4Data7CompareERKS_+0x38>
  96:	11 96       	adiw	r26, 0x01	; 1
  98:	9c 91       	ld	r25, X
  9a:	11 97       	sbiw	r26, 0x01	; 1
  9c:	21 81       	ldd	r18, Z+1	; 0x01
  9e:	92 17       	cp	r25, r18
  a0:	29 f0       	breq	.+10     	; 0xac <_ZNK4Data7CompareERKS_+0x2c>
  a2:	89 2f       	mov	r24, r25
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	82 1b       	sub	r24, r18
  a8:	91 09       	sbc	r25, r1
  aa:	08 95       	ret
  ac:	8c 91       	ld	r24, X
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	20 81       	ld	r18, Z
  b2:	82 1b       	sub	r24, r18
  b4:	91 09       	sbc	r25, r1
  b6:	08 95       	ret
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	08 95       	ret

000000be <_ZNK4DataeqERKS_>:
  be:	1b b8       	out	0x0b, r1	; 11
  c0:	0e 94 40 00 	call	0x80	; 0x80 <_ZNK4Data7CompareERKS_>
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	89 2b       	or	r24, r25
  c8:	09 f0       	breq	.+2      	; 0xcc <_ZNK4DataeqERKS_+0xe>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	82 2f       	mov	r24, r18
  ce:	08 95       	ret

000000d0 <main>:
	} else {
		//mensagem de error!
	}
}
int main(void)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
  d8:	2a 97       	sbiw	r28, 0x0a	; 10
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61

};

Data::Data()
{
	this->dia = 30;
  e4:	4e e1       	ldi	r20, 0x1E	; 30
  e6:	49 83       	std	Y+1, r20	; 0x01
	this->mes = 9;
  e8:	99 e0       	ldi	r25, 0x09	; 9
  ea:	9a 83       	std	Y+2, r25	; 0x02
	this->ano = 2017; 
  ec:	21 ee       	ldi	r18, 0xE1	; 225
  ee:	37 e0       	ldi	r19, 0x07	; 7
  f0:	3c 83       	std	Y+4, r19	; 0x04
  f2:	2b 83       	std	Y+3, r18	; 0x03
	this->status = true;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	8d 83       	std	Y+5, r24	; 0x05

};

Data::Data()
{
	this->dia = 30;
  f8:	4e 83       	std	Y+6, r20	; 0x06
	this->mes = 9;
  fa:	9f 83       	std	Y+7, r25	; 0x07
	this->ano = 2017; 
  fc:	39 87       	std	Y+9, r19	; 0x09
  fe:	28 87       	std	Y+8, r18	; 0x08
	this->status = true;
 100:	8a 87       	std	Y+10, r24	; 0x0a
	dt.data_imprime();    
	dt.data_altera(12, 10, 2017);
	dt.data_imprime();

   	 Data dt1, dt2; 
	if(dt1 == dt2)
 102:	be 01       	movw	r22, r28
 104:	6a 5f       	subi	r22, 0xFA	; 250
 106:	7f 4f       	sbci	r23, 0xFF	; 255
 108:	ce 01       	movw	r24, r28
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	0e 94 5f 00 	call	0xbe	; 0xbe <_ZNK4DataeqERKS_>
 110:	81 11       	cpse	r24, r1
	{
		PORTD = 0;
 112:	1b b8       	out	0x0b, r1	; 11
 114:	ff cf       	rjmp	.-2      	; 0x114 <main+0x44>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
