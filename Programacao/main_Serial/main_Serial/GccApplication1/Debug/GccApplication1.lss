
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000a0c  00000aa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  0080010c  0080010c  00000aac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00000b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001090  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a11  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000844  00000000  00000000  000026d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00002f20  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000561  00000000  00000000  0000311c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007e0  00000000  00000000  0000367d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003e5d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e0       	ldi	r30, 0x0C	; 12
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 32       	cpi	r26, 0x23	; 35
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a9 01 	call	0x352	; 0x352 <main>
  9e:	0c 94 04 05 	jmp	0xa08	; 0xa08 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#include <avr/interrupt.h>

void adc_init(void)
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b2:	08 95       	ret

000000b4 <adc_read>:
{
	// select the corresponding channel 0~7
	// ANDing with â€™7' will always keep the value
	// of â€˜châ€™ between 0 and 7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch; 
  b4:	ec e7       	ldi	r30, 0x7C	; 124
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	98 7f       	andi	r25, 0xF8	; 248
  bc:	87 70       	andi	r24, 0x07	; 7
  be:	89 2b       	or	r24, r25
  c0:	80 83       	st	Z, r24

	// start single convertion
	// write â€™1' to ADSC
	ADCSRA |= (1<<ADSC);
  c2:	ea e7       	ldi	r30, 0x7A	; 122
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 64       	ori	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24

	// wait for conversion to complete
	// ADSC becomes â€™0' again
	// till then, run loop continuously
	while(ADCSRA & (1<<ADSC));
  cc:	80 81       	ld	r24, Z
  ce:	86 fd       	sbrc	r24, 6
  d0:	fd cf       	rjmp	.-6      	; 0xcc <adc_read+0x18>

	return (ADCW);
  d2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  da:	08 95       	ret

000000dc <LCD_Enable>:
  LCD_Write_Data(0, CmdLCD);     //RS = 0, -> COMANDO A SER PROCESSADO
}

void DisplayLCD_Chr_Cp(unsigned char Tchar)
{
   LCD_Write_Data(1, Tchar);    //RS = 1 -> DADO A SER ESCRITO
  dc:	85 ed       	ldi	r24, 0xD5	; 213
  de:	8a 95       	dec	r24
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Enable+0x2>
  e2:	00 00       	nop
  e4:	29 9a       	sbi	0x05, 1	; 5
  e6:	85 ed       	ldi	r24, 0xD5	; 213
  e8:	8a 95       	dec	r24
  ea:	f1 f7       	brne	.-4      	; 0xe8 <LCD_Enable+0xc>
  ec:	00 00       	nop
  ee:	29 98       	cbi	0x05, 1	; 5
  f0:	85 ed       	ldi	r24, 0xD5	; 213
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Enable+0x16>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <LCD_Write_Data>:
  fa:	cf 93       	push	r28
  fc:	c6 2f       	mov	r28, r22
  fe:	80 fd       	sbrc	r24, 0
 100:	28 9a       	sbi	0x05, 0	; 5
 102:	80 ff       	sbrs	r24, 0
 104:	28 98       	cbi	0x05, 0	; 5
 106:	8f e3       	ldi	r24, 0x3F	; 63
 108:	9f e1       	ldi	r25, 0x1F	; 31
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_Write_Data+0x10>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_Write_Data+0x16>
 110:	00 00       	nop
 112:	64 fb       	bst	r22, 4
 114:	88 27       	eor	r24, r24
 116:	80 f9       	bld	r24, 0
 118:	80 fd       	sbrc	r24, 0
 11a:	5c 9a       	sbi	0x0b, 4	; 11
 11c:	80 ff       	sbrs	r24, 0
 11e:	5c 98       	cbi	0x0b, 4	; 11
 120:	65 fb       	bst	r22, 5
 122:	88 27       	eor	r24, r24
 124:	80 f9       	bld	r24, 0
 126:	80 fd       	sbrc	r24, 0
 128:	5d 9a       	sbi	0x0b, 5	; 11
 12a:	80 ff       	sbrs	r24, 0
 12c:	5d 98       	cbi	0x0b, 5	; 11
 12e:	66 fb       	bst	r22, 6
 130:	88 27       	eor	r24, r24
 132:	80 f9       	bld	r24, 0
 134:	80 fd       	sbrc	r24, 0
 136:	5e 9a       	sbi	0x0b, 6	; 11
 138:	80 ff       	sbrs	r24, 0
 13a:	5e 98       	cbi	0x0b, 6	; 11
 13c:	86 2f       	mov	r24, r22
 13e:	88 1f       	adc	r24, r24
 140:	88 27       	eor	r24, r24
 142:	88 1f       	adc	r24, r24
 144:	80 fd       	sbrc	r24, 0
 146:	5f 9a       	sbi	0x0b, 7	; 11
 148:	80 ff       	sbrs	r24, 0
 14a:	5f 98       	cbi	0x0b, 7	; 11
 14c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Enable>
 150:	c2 95       	swap	r28
 152:	c0 7f       	andi	r28, 0xF0	; 240
 154:	c4 fb       	bst	r28, 4
 156:	88 27       	eor	r24, r24
 158:	80 f9       	bld	r24, 0
 15a:	80 fd       	sbrc	r24, 0
 15c:	5c 9a       	sbi	0x0b, 4	; 11
 15e:	80 ff       	sbrs	r24, 0
 160:	5c 98       	cbi	0x0b, 4	; 11
 162:	c5 fb       	bst	r28, 5
 164:	88 27       	eor	r24, r24
 166:	80 f9       	bld	r24, 0
 168:	80 fd       	sbrc	r24, 0
 16a:	5d 9a       	sbi	0x0b, 5	; 11
 16c:	80 ff       	sbrs	r24, 0
 16e:	5d 98       	cbi	0x0b, 5	; 11
 170:	c6 fb       	bst	r28, 6
 172:	88 27       	eor	r24, r24
 174:	80 f9       	bld	r24, 0
 176:	80 fd       	sbrc	r24, 0
 178:	5e 9a       	sbi	0x0b, 6	; 11
 17a:	80 ff       	sbrs	r24, 0
 17c:	5e 98       	cbi	0x0b, 6	; 11
 17e:	cc 1f       	adc	r28, r28
 180:	cc 27       	eor	r28, r28
 182:	cc 1f       	adc	r28, r28
 184:	c0 fd       	sbrc	r28, 0
 186:	5f 9a       	sbi	0x0b, 7	; 11
 188:	c0 ff       	sbrs	r28, 0
 18a:	5f 98       	cbi	0x0b, 7	; 11
 18c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Enable>
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <DisplayLCD_Cmd>:
 194:	68 2f       	mov	r22, r24
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Write_Data>
 19c:	08 95       	ret

0000019e <DisplayLCD_Init>:
}

//funções
void DisplayLCD_Init()
{ 
 LCD_DATA4_TRIS = 1; LCD_DATA4_IO = 0;
 19e:	54 9a       	sbi	0x0a, 4	; 10
 1a0:	5c 98       	cbi	0x0b, 4	; 11
 LCD_DATA5_TRIS = 1; LCD_DATA5_IO = 0;
 1a2:	55 9a       	sbi	0x0a, 5	; 10
 1a4:	5d 98       	cbi	0x0b, 5	; 11
 LCD_DATA6_TRIS = 1; LCD_DATA6_IO = 0;
 1a6:	56 9a       	sbi	0x0a, 6	; 10
 1a8:	5e 98       	cbi	0x0b, 6	; 11
 LCD_DATA7_TRIS = 1; LCD_DATA7_IO = 0;
 1aa:	57 9a       	sbi	0x0a, 7	; 10
 1ac:	5f 98       	cbi	0x0b, 7	; 11
 LCD_EN_TRIS = 1; LCD_RS_IO = 0;
 1ae:	21 9a       	sbi	0x04, 1	; 4
 1b0:	28 98       	cbi	0x05, 0	; 5
 LCD_RS_TRIS = 1; LCD_RS_IO = 0;
 1b2:	20 9a       	sbi	0x04, 0	; 4
 1b4:	28 98       	cbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	81 ee       	ldi	r24, 0xE1	; 225
 1ba:	94 e0       	ldi	r25, 0x04	; 4
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <DisplayLCD_Init+0x1e>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <DisplayLCD_Init+0x28>
 1c6:	00 00       	nop

 _delay_ms(100);  //Tempo necessário para inicialização do LCD após power-on

 LCD_DATA4_IO = 1;
 1c8:	5c 9a       	sbi	0x0b, 4	; 11
 LCD_DATA5_IO = 1;
 1ca:	5d 9a       	sbi	0x0b, 5	; 11
 LCD_Enable();
 1cc:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Enable>
 LCD_Enable();
 1d0:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Enable>
 LCD_Enable();
 1d4:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Enable>
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <DisplayLCD_Init+0x3e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <DisplayLCD_Init+0x44>
 1e2:	00 00       	nop

 _delay_ms(1);

 LCD_DATA4_IO = 0;
 1e4:	5c 98       	cbi	0x0b, 4	; 11
 LCD_DATA5_IO = 1;
 1e6:	5d 9a       	sbi	0x0b, 5	; 11
 LCD_Enable();
 1e8:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Enable>
 LCD_Enable();
 1ec:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Enable>
 LCD_Enable();
 1f0:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_Enable>
 1f4:	8f e9       	ldi	r24, 0x9F	; 159
 1f6:	9f e0       	ldi	r25, 0x0F	; 15
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <DisplayLCD_Init+0x5a>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <DisplayLCD_Init+0x60>
 1fe:	00 00       	nop

 _delay_ms(1);


 DisplayLCD_Cmd(0X28); //2X linhas 7x5 em modo 4bits
 200:	88 e2       	ldi	r24, 0x28	; 40
 202:	0e 94 ca 00 	call	0x194	; 0x194 <DisplayLCD_Cmd>
 DisplayLCD_Cmd(0X0C);
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	0e 94 ca 00 	call	0x194	; 0x194 <DisplayLCD_Cmd>
 DisplayLCD_Cmd(0X06);
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	0e 94 ca 00 	call	0x194	; 0x194 <DisplayLCD_Cmd>
 DisplayLCD_Cmd(0X01);
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 ca 00 	call	0x194	; 0x194 <DisplayLCD_Cmd>
 218:	9f ef       	ldi	r25, 0xFF	; 255
 21a:	21 ee       	ldi	r18, 0xE1	; 225
 21c:	84 e0       	ldi	r24, 0x04	; 4
 21e:	91 50       	subi	r25, 0x01	; 1
 220:	20 40       	sbci	r18, 0x00	; 0
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <DisplayLCD_Init+0x80>
 226:	00 c0       	rjmp	.+0      	; 0x228 <DisplayLCD_Init+0x8a>
 228:	00 00       	nop
 22a:	08 95       	ret

0000022c <DisplayLCD_Out_Cp>:
}


//DisplayLCD_Out_Cp("BOM DIA");
void DisplayLCD_Out_Cp(unsigned char *Ponteiro)
{
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 // LCD_RS_IO = 1;  //ESCREVER UM DADO
  while(*Ponteiro) //loop até encontrar o caractere NULL (ZERO)
 230:	fc 01       	movw	r30, r24
 232:	60 81       	ld	r22, Z
 234:	66 23       	and	r22, r22
 236:	41 f0       	breq	.+16     	; 0x248 <DisplayLCD_Out_Cp+0x1c>
 238:	ec 01       	movw	r28, r24
 23a:	21 96       	adiw	r28, 0x01	; 1
  {
    LCD_Write_Data(1,*Ponteiro);  //RS =1, ESCREVENDO NO LCD
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Write_Data>

//DisplayLCD_Out_Cp("BOM DIA");
void DisplayLCD_Out_Cp(unsigned char *Ponteiro)
{
 // LCD_RS_IO = 1;  //ESCREVER UM DADO
  while(*Ponteiro) //loop até encontrar o caractere NULL (ZERO)
 242:	69 91       	ld	r22, Y+
 244:	61 11       	cpse	r22, r1
 246:	fa cf       	rjmp	.-12     	; 0x23c <DisplayLCD_Out_Cp+0x10>
    LCD_Write_Data(1,*Ponteiro);  //RS =1, ESCREVENDO NO LCD
    //LCD_Enable();
    ++Ponteiro;
  }

}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	08 95       	ret

0000024e <DisplayLCD_Out>:
}

//DisplayLCD_Out(1,2, "BOM DIA");
void DisplayLCD_Out(unsigned char Linha, unsigned char Coluna,
                    unsigned char *TextoLCD)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ea 01       	movw	r28, r20
  LCD_RS_IO = 0; //TRATAR PRIMEIRO AS COORDENADAS X E Y
 254:	28 98       	cbi	0x05, 0	; 5
  switch(Linha)
 256:	81 30       	cpi	r24, 0x01	; 1
 258:	19 f0       	breq	.+6      	; 0x260 <DisplayLCD_Out+0x12>
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	31 f0       	breq	.+12     	; 0x26a <DisplayLCD_Out+0x1c>
 25e:	09 c0       	rjmp	.+18     	; 0x272 <DisplayLCD_Out+0x24>
  {
    case 1: {
            Coluna =  Coluna + 0X7F;  // 2 + 0X7F = 0X81
            LCD_Write_Data(0,Coluna); //Comando, visto que estamos posicionando o cursor
 260:	61 58       	subi	r22, 0x81	; 129
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Write_Data>
            //LCD_Enable();
            break;
 268:	04 c0       	rjmp	.+8      	; 0x272 <DisplayLCD_Out+0x24>
            }
    case 2: {
            Coluna = Coluna + 0xBF;  //2 + 0xBF = 0XC1
            LCD_Write_Data(0,Coluna);
 26a:	61 54       	subi	r22, 0x41	; 65
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_Write_Data>
           //LCD_Enable();
            break;
            }
  }
  DisplayLCD_Out_Cp(TextoLCD); //Escreve no LCD "BOM DIA"
 272:	ce 01       	movw	r24, r28
 274:	0e 94 16 01 	call	0x22c	; 0x22c <DisplayLCD_Out_Cp>
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <decMatriz>:
char *pot;
char aux = 0;

void decMatriz()
{
	if(matriz[0] == 'L' && matriz[1] == 'D')
 27e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <matriz>
 282:	8c 34       	cpi	r24, 0x4C	; 76
 284:	79 f4       	brne	.+30     	; 0x2a4 <decMatriz+0x26>
 286:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <matriz+0x1>
 28a:	84 34       	cpi	r24, 0x44	; 68
 28c:	59 f4       	brne	.+22     	; 0x2a4 <decMatriz+0x26>
	{
		switch (matriz[2])
 28e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <matriz+0x2>
 292:	80 33       	cpi	r24, 0x30	; 48
 294:	39 f4       	brne	.+14     	; 0x2a4 <decMatriz+0x26>
		{
			case '0':
			if(matriz[3] == '0')
 296:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <matriz+0x3>
 29a:	80 33       	cpi	r24, 0x30	; 48
 29c:	11 f4       	brne	.+4      	; 0x2a2 <decMatriz+0x24>
			{
				Set_bit(PORTB,5);
 29e:	2d 9a       	sbi	0x05, 5	; 5
 2a0:	08 95       	ret
				}
				else
				{
				Clr_bit(PORTB,5);
 2a2:	2d 98       	cbi	0x05, 5	; 5
 2a4:	08 95       	ret

000002a6 <__vector_18>:
		}
	}
}

ISR(USART_RX_vect)
{
 2a6:	1f 92       	push	r1
 2a8:	0f 92       	push	r0
 2aa:	0f b6       	in	r0, 0x3f	; 63
 2ac:	0f 92       	push	r0
 2ae:	11 24       	eor	r1, r1
 2b0:	2f 93       	push	r18
 2b2:	3f 93       	push	r19
 2b4:	4f 93       	push	r20
 2b6:	5f 93       	push	r21
 2b8:	6f 93       	push	r22
 2ba:	7f 93       	push	r23
 2bc:	8f 93       	push	r24
 2be:	9f 93       	push	r25
 2c0:	af 93       	push	r26
 2c2:	bf 93       	push	r27
 2c4:	ef 93       	push	r30
 2c6:	ff 93       	push	r31
	char res;
	res = USART_Receive();
 2c8:	0e 94 fd 01 	call	0x3fa	; 0x3fa <USART_Receive>
	if(res == '[')
 2cc:	8b 35       	cpi	r24, 0x5B	; 91
 2ce:	51 f4       	brne	.+20     	; 0x2e4 <__vector_18+0x3e>
	{
		pot = matriz; //Armazena o endereço da Matriz em Pot
 2d0:	8f e0       	ldi	r24, 0x0F	; 15
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <pot+0x1>
 2d8:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <pot>
		aux = 1;
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
 2e2:	26 c0       	rjmp	.+76     	; 0x330 <__vector_18+0x8a>
	}else{
	if(aux == 1)
 2e4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 2e8:	91 30       	cpi	r25, 0x01	; 1
 2ea:	11 f5       	brne	.+68     	; 0x330 <__vector_18+0x8a>
	{
		if((pot-matriz) < 20){
 2ec:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <pot>
 2f0:	f0 91 0e 01 	lds	r31, 0x010E	; 0x80010e <pot+0x1>
 2f4:	9f 01       	movw	r18, r30
 2f6:	2f 50       	subi	r18, 0x0F	; 15
 2f8:	31 40       	sbci	r19, 0x01	; 1
 2fa:	24 31       	cpi	r18, 0x14	; 20
 2fc:	31 05       	cpc	r19, r1
 2fe:	b4 f4       	brge	.+44     	; 0x32c <__vector_18+0x86>
			*pot = res; //
 300:	80 83       	st	Z, r24
			
			pot++;
 302:	20 91 0d 01 	lds	r18, 0x010D	; 0x80010d <pot>
 306:	30 91 0e 01 	lds	r19, 0x010E	; 0x80010e <pot+0x1>
 30a:	2f 5f       	subi	r18, 0xFF	; 255
 30c:	3f 4f       	sbci	r19, 0xFF	; 255
 30e:	30 93 0e 01 	sts	0x010E, r19	; 0x80010e <pot+0x1>
 312:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <pot>
		}
	}
	if(res == ']' && aux ==1)
 316:	8d 35       	cpi	r24, 0x5D	; 93
 318:	59 f4       	brne	.+22     	; 0x330 <__vector_18+0x8a>
 31a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	39 f4       	brne	.+14     	; 0x330 <__vector_18+0x8a>
	{
		decMatriz();
 322:	0e 94 3f 01 	call	0x27e	; 0x27e <decMatriz>
		aux = 0;
 326:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
	}
}
	}
 32a:	02 c0       	rjmp	.+4      	; 0x330 <__vector_18+0x8a>
			*pot = res; //
			
			pot++;
		}
	}
	if(res == ']' && aux ==1)
 32c:	8d 35       	cpi	r24, 0x5D	; 93
 32e:	c9 f3       	breq	.-14     	; 0x322 <__vector_18+0x7c>
	{
		decMatriz();
		aux = 0;
	}
}
	}
 330:	ff 91       	pop	r31
 332:	ef 91       	pop	r30
 334:	bf 91       	pop	r27
 336:	af 91       	pop	r26
 338:	9f 91       	pop	r25
 33a:	8f 91       	pop	r24
 33c:	7f 91       	pop	r23
 33e:	6f 91       	pop	r22
 340:	5f 91       	pop	r21
 342:	4f 91       	pop	r20
 344:	3f 91       	pop	r19
 346:	2f 91       	pop	r18
 348:	0f 90       	pop	r0
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	0f 90       	pop	r0
 34e:	1f 90       	pop	r1
 350:	18 95       	reti

00000352 <main>:



int main(void)
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
 35a:	64 97       	sbiw	r28, 0x14	; 20
 35c:	0f b6       	in	r0, 0x3f	; 63
 35e:	f8 94       	cli
 360:	de bf       	out	0x3e, r29	; 62
 362:	0f be       	out	0x3f, r0	; 63
 364:	cd bf       	out	0x3d, r28	; 61
	uint16_t adc_result;
	char buffer[20];
	
	sei();
 366:	78 94       	sei
	
	USART_Init();
 368:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <USART_Init>
	USART_StrTx((const char*)"HELLO");
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 05 02 	call	0x40a	; 0x40a <USART_StrTx>
	USART_rxIE();
 374:	0e 94 14 02 	call	0x428	; 0x428 <USART_rxIE>
	
	adc_init();
 378:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	
	DisplayLCD_Init();
 37c:	0e 94 cf 00 	call	0x19e	; 0x19e <DisplayLCD_Init>
	DisplayLCD_Cmd(LCD_Clear);
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 ca 00 	call	0x194	; 0x194 <DisplayLCD_Cmd>
	DisplayLCD_Out(1,2,"HELLO");
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	51 e0       	ldi	r21, 0x01	; 1
 38a:	62 e0       	ldi	r22, 0x02	; 2
 38c:	81 e0       	ldi	r24, 0x01	; 1
 38e:	0e 94 27 01 	call	0x24e	; 0x24e <DisplayLCD_Out>
	
    while (1) 
    {
		adc_result = adc_read(0);
		sprintf(buffer, "%d \r\n", adc_result );
 392:	0f 2e       	mov	r0, r31
 394:	f6 e0       	ldi	r31, 0x06	; 6
 396:	ef 2e       	mov	r14, r31
 398:	f1 e0       	ldi	r31, 0x01	; 1
 39a:	ff 2e       	mov	r15, r31
 39c:	f0 2d       	mov	r31, r0
 39e:	8e 01       	movw	r16, r28
 3a0:	0f 5f       	subi	r16, 0xFF	; 255
 3a2:	1f 4f       	sbci	r17, 0xFF	; 255
	DisplayLCD_Cmd(LCD_Clear);
	DisplayLCD_Out(1,2,"HELLO");
	
    while (1) 
    {
		adc_result = adc_read(0);
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 5a 00 	call	0xb4	; 0xb4 <adc_read>
		sprintf(buffer, "%d \r\n", adc_result );
 3aa:	9f 93       	push	r25
 3ac:	8f 93       	push	r24
 3ae:	ff 92       	push	r15
 3b0:	ef 92       	push	r14
 3b2:	1f 93       	push	r17
 3b4:	0f 93       	push	r16
 3b6:	0e 94 1a 02 	call	0x434	; 0x434 <sprintf>
		
		cli();
 3ba:	f8 94       	cli
		USART_StrTx(buffer);
 3bc:	c8 01       	movw	r24, r16
 3be:	0e 94 05 02 	call	0x40a	; 0x40a <USART_StrTx>
		sei();
 3c2:	78 94       	sei
 3c4:	0f 90       	pop	r0
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	0f 90       	pop	r0
 3cc:	0f 90       	pop	r0
 3ce:	0f 90       	pop	r0
 3d0:	e9 cf       	rjmp	.-46     	; 0x3a4 <main+0x52>

000003d2 <USART_Init>:
#include "usart.h"

void USART_Init()
{
	UBRR0H = (uint8_t) (MYUBRR>>8);				// Ajuste da transmissÃ£o em 9600 bps
 3d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (uint8_t)(MYUBRR);
 3d6:	87 e6       	ldi	r24, 0x67	; 103
 3d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);				// Habilita transmissÃ£o e recepÃ§Ã£o
 3dc:	88 e1       	ldi	r24, 0x18	; 24
 3de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (3<<UCSZ00);						// Modo assincrono, 8 bits, 1 stop, sem paridade
 3e2:	86 e0       	ldi	r24, 0x06	; 6
 3e4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 3e8:	08 95       	ret

000003ea <USART_Transmit>:
}
//-------------------------------------------------------------------------------------------------------
void USART_Transmit(unsigned char data)
{
	while(!(UCSR0A & (1<<UDRE0)));				// Espera o dado ser enviado
 3ea:	e0 ec       	ldi	r30, 0xC0	; 192
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
 3ee:	90 81       	ld	r25, Z
 3f0:	95 ff       	sbrs	r25, 5
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <USART_Transmit+0x4>
	UDR0 = data;								// Envia o dado pela porta serial
 3f4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 3f8:	08 95       	ret

000003fa <USART_Receive>:
}

//-------------------------------------------------------------------------------------------------------
unsigned char USART_Receive()
{
	while(!(UCSR0A & (1<<RXC0)));				// Espera o dado ser recebido
 3fa:	e0 ec       	ldi	r30, 0xC0	; 192
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	88 23       	and	r24, r24
 402:	ec f7       	brge	.-6      	; 0x3fe <USART_Receive+0x4>
	return UDR0;
 404:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 408:	08 95       	ret

0000040a <USART_StrTx>:

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	ec 01       	movw	r28, r24
	while(*ptr != '\0')
 410:	88 81       	ld	r24, Y
 412:	88 23       	and	r24, r24
 414:	31 f0       	breq	.+12     	; 0x422 <USART_StrTx+0x18>
 416:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_Transmit(*ptr);
 418:	0e 94 f5 01 	call	0x3ea	; 0x3ea <USART_Transmit>
}

//-------------------------------------------------------------------------------------------------------
void USART_StrTx(const char* ptr)
{
	while(*ptr != '\0')
 41c:	89 91       	ld	r24, Y+
 41e:	81 11       	cpse	r24, r1
 420:	fb cf       	rjmp	.-10     	; 0x418 <USART_StrTx+0xe>
	{
		USART_Transmit(*ptr);
		ptr++;
	}
}
 422:	df 91       	pop	r29
 424:	cf 91       	pop	r28
 426:	08 95       	ret

00000428 <USART_rxIE>:
//-------------------------------------------------------------------------------------------------------
void USART_rxIE()
{
	UCSR0B |= (1 << RXCIE0 );
 428:	e1 ec       	ldi	r30, 0xC1	; 193
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	80 81       	ld	r24, Z
 42e:	80 68       	ori	r24, 0x80	; 128
 430:	80 83       	st	Z, r24
 432:	08 95       	ret

00000434 <sprintf>:
 434:	ae e0       	ldi	r26, 0x0E	; 14
 436:	b0 e0       	ldi	r27, 0x00	; 0
 438:	e0 e2       	ldi	r30, 0x20	; 32
 43a:	f2 e0       	ldi	r31, 0x02	; 2
 43c:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__prologue_saves__+0x1c>
 440:	0d 89       	ldd	r16, Y+21	; 0x15
 442:	1e 89       	ldd	r17, Y+22	; 0x16
 444:	86 e0       	ldi	r24, 0x06	; 6
 446:	8c 83       	std	Y+4, r24	; 0x04
 448:	1a 83       	std	Y+2, r17	; 0x02
 44a:	09 83       	std	Y+1, r16	; 0x01
 44c:	8f ef       	ldi	r24, 0xFF	; 255
 44e:	9f e7       	ldi	r25, 0x7F	; 127
 450:	9e 83       	std	Y+6, r25	; 0x06
 452:	8d 83       	std	Y+5, r24	; 0x05
 454:	ae 01       	movw	r20, r28
 456:	47 5e       	subi	r20, 0xE7	; 231
 458:	5f 4f       	sbci	r21, 0xFF	; 255
 45a:	6f 89       	ldd	r22, Y+23	; 0x17
 45c:	78 8d       	ldd	r23, Y+24	; 0x18
 45e:	ce 01       	movw	r24, r28
 460:	01 96       	adiw	r24, 0x01	; 1
 462:	0e 94 3c 02 	call	0x478	; 0x478 <vfprintf>
 466:	ef 81       	ldd	r30, Y+7	; 0x07
 468:	f8 85       	ldd	r31, Y+8	; 0x08
 46a:	e0 0f       	add	r30, r16
 46c:	f1 1f       	adc	r31, r17
 46e:	10 82       	st	Z, r1
 470:	2e 96       	adiw	r28, 0x0e	; 14
 472:	e4 e0       	ldi	r30, 0x04	; 4
 474:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <__epilogue_restores__+0x1c>

00000478 <vfprintf>:
 478:	ab e0       	ldi	r26, 0x0B	; 11
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	e2 e4       	ldi	r30, 0x42	; 66
 47e:	f2 e0       	ldi	r31, 0x02	; 2
 480:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__prologue_saves__>
 484:	6c 01       	movw	r12, r24
 486:	7b 01       	movw	r14, r22
 488:	8a 01       	movw	r16, r20
 48a:	fc 01       	movw	r30, r24
 48c:	17 82       	std	Z+7, r1	; 0x07
 48e:	16 82       	std	Z+6, r1	; 0x06
 490:	83 81       	ldd	r24, Z+3	; 0x03
 492:	81 ff       	sbrs	r24, 1
 494:	cc c1       	rjmp	.+920    	; 0x82e <vfprintf+0x3b6>
 496:	ce 01       	movw	r24, r28
 498:	01 96       	adiw	r24, 0x01	; 1
 49a:	3c 01       	movw	r6, r24
 49c:	f6 01       	movw	r30, r12
 49e:	93 81       	ldd	r25, Z+3	; 0x03
 4a0:	f7 01       	movw	r30, r14
 4a2:	93 fd       	sbrc	r25, 3
 4a4:	85 91       	lpm	r24, Z+
 4a6:	93 ff       	sbrs	r25, 3
 4a8:	81 91       	ld	r24, Z+
 4aa:	7f 01       	movw	r14, r30
 4ac:	88 23       	and	r24, r24
 4ae:	09 f4       	brne	.+2      	; 0x4b2 <vfprintf+0x3a>
 4b0:	ba c1       	rjmp	.+884    	; 0x826 <vfprintf+0x3ae>
 4b2:	85 32       	cpi	r24, 0x25	; 37
 4b4:	39 f4       	brne	.+14     	; 0x4c4 <vfprintf+0x4c>
 4b6:	93 fd       	sbrc	r25, 3
 4b8:	85 91       	lpm	r24, Z+
 4ba:	93 ff       	sbrs	r25, 3
 4bc:	81 91       	ld	r24, Z+
 4be:	7f 01       	movw	r14, r30
 4c0:	85 32       	cpi	r24, 0x25	; 37
 4c2:	29 f4       	brne	.+10     	; 0x4ce <vfprintf+0x56>
 4c4:	b6 01       	movw	r22, r12
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 4cc:	e7 cf       	rjmp	.-50     	; 0x49c <vfprintf+0x24>
 4ce:	91 2c       	mov	r9, r1
 4d0:	21 2c       	mov	r2, r1
 4d2:	31 2c       	mov	r3, r1
 4d4:	ff e1       	ldi	r31, 0x1F	; 31
 4d6:	f3 15       	cp	r31, r3
 4d8:	d8 f0       	brcs	.+54     	; 0x510 <vfprintf+0x98>
 4da:	8b 32       	cpi	r24, 0x2B	; 43
 4dc:	79 f0       	breq	.+30     	; 0x4fc <vfprintf+0x84>
 4de:	38 f4       	brcc	.+14     	; 0x4ee <vfprintf+0x76>
 4e0:	80 32       	cpi	r24, 0x20	; 32
 4e2:	79 f0       	breq	.+30     	; 0x502 <vfprintf+0x8a>
 4e4:	83 32       	cpi	r24, 0x23	; 35
 4e6:	a1 f4       	brne	.+40     	; 0x510 <vfprintf+0x98>
 4e8:	23 2d       	mov	r18, r3
 4ea:	20 61       	ori	r18, 0x10	; 16
 4ec:	1d c0       	rjmp	.+58     	; 0x528 <vfprintf+0xb0>
 4ee:	8d 32       	cpi	r24, 0x2D	; 45
 4f0:	61 f0       	breq	.+24     	; 0x50a <vfprintf+0x92>
 4f2:	80 33       	cpi	r24, 0x30	; 48
 4f4:	69 f4       	brne	.+26     	; 0x510 <vfprintf+0x98>
 4f6:	23 2d       	mov	r18, r3
 4f8:	21 60       	ori	r18, 0x01	; 1
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <vfprintf+0xb0>
 4fc:	83 2d       	mov	r24, r3
 4fe:	82 60       	ori	r24, 0x02	; 2
 500:	38 2e       	mov	r3, r24
 502:	e3 2d       	mov	r30, r3
 504:	e4 60       	ori	r30, 0x04	; 4
 506:	3e 2e       	mov	r3, r30
 508:	2a c0       	rjmp	.+84     	; 0x55e <vfprintf+0xe6>
 50a:	f3 2d       	mov	r31, r3
 50c:	f8 60       	ori	r31, 0x08	; 8
 50e:	1d c0       	rjmp	.+58     	; 0x54a <vfprintf+0xd2>
 510:	37 fc       	sbrc	r3, 7
 512:	2d c0       	rjmp	.+90     	; 0x56e <vfprintf+0xf6>
 514:	20 ed       	ldi	r18, 0xD0	; 208
 516:	28 0f       	add	r18, r24
 518:	2a 30       	cpi	r18, 0x0A	; 10
 51a:	40 f0       	brcs	.+16     	; 0x52c <vfprintf+0xb4>
 51c:	8e 32       	cpi	r24, 0x2E	; 46
 51e:	b9 f4       	brne	.+46     	; 0x54e <vfprintf+0xd6>
 520:	36 fc       	sbrc	r3, 6
 522:	81 c1       	rjmp	.+770    	; 0x826 <vfprintf+0x3ae>
 524:	23 2d       	mov	r18, r3
 526:	20 64       	ori	r18, 0x40	; 64
 528:	32 2e       	mov	r3, r18
 52a:	19 c0       	rjmp	.+50     	; 0x55e <vfprintf+0xe6>
 52c:	36 fe       	sbrs	r3, 6
 52e:	06 c0       	rjmp	.+12     	; 0x53c <vfprintf+0xc4>
 530:	8a e0       	ldi	r24, 0x0A	; 10
 532:	98 9e       	mul	r9, r24
 534:	20 0d       	add	r18, r0
 536:	11 24       	eor	r1, r1
 538:	92 2e       	mov	r9, r18
 53a:	11 c0       	rjmp	.+34     	; 0x55e <vfprintf+0xe6>
 53c:	ea e0       	ldi	r30, 0x0A	; 10
 53e:	2e 9e       	mul	r2, r30
 540:	20 0d       	add	r18, r0
 542:	11 24       	eor	r1, r1
 544:	22 2e       	mov	r2, r18
 546:	f3 2d       	mov	r31, r3
 548:	f0 62       	ori	r31, 0x20	; 32
 54a:	3f 2e       	mov	r3, r31
 54c:	08 c0       	rjmp	.+16     	; 0x55e <vfprintf+0xe6>
 54e:	8c 36       	cpi	r24, 0x6C	; 108
 550:	21 f4       	brne	.+8      	; 0x55a <vfprintf+0xe2>
 552:	83 2d       	mov	r24, r3
 554:	80 68       	ori	r24, 0x80	; 128
 556:	38 2e       	mov	r3, r24
 558:	02 c0       	rjmp	.+4      	; 0x55e <vfprintf+0xe6>
 55a:	88 36       	cpi	r24, 0x68	; 104
 55c:	41 f4       	brne	.+16     	; 0x56e <vfprintf+0xf6>
 55e:	f7 01       	movw	r30, r14
 560:	93 fd       	sbrc	r25, 3
 562:	85 91       	lpm	r24, Z+
 564:	93 ff       	sbrs	r25, 3
 566:	81 91       	ld	r24, Z+
 568:	7f 01       	movw	r14, r30
 56a:	81 11       	cpse	r24, r1
 56c:	b3 cf       	rjmp	.-154    	; 0x4d4 <vfprintf+0x5c>
 56e:	98 2f       	mov	r25, r24
 570:	9f 7d       	andi	r25, 0xDF	; 223
 572:	95 54       	subi	r25, 0x45	; 69
 574:	93 30       	cpi	r25, 0x03	; 3
 576:	28 f4       	brcc	.+10     	; 0x582 <vfprintf+0x10a>
 578:	0c 5f       	subi	r16, 0xFC	; 252
 57a:	1f 4f       	sbci	r17, 0xFF	; 255
 57c:	9f e3       	ldi	r25, 0x3F	; 63
 57e:	99 83       	std	Y+1, r25	; 0x01
 580:	0d c0       	rjmp	.+26     	; 0x59c <vfprintf+0x124>
 582:	83 36       	cpi	r24, 0x63	; 99
 584:	31 f0       	breq	.+12     	; 0x592 <vfprintf+0x11a>
 586:	83 37       	cpi	r24, 0x73	; 115
 588:	71 f0       	breq	.+28     	; 0x5a6 <vfprintf+0x12e>
 58a:	83 35       	cpi	r24, 0x53	; 83
 58c:	09 f0       	breq	.+2      	; 0x590 <vfprintf+0x118>
 58e:	59 c0       	rjmp	.+178    	; 0x642 <vfprintf+0x1ca>
 590:	21 c0       	rjmp	.+66     	; 0x5d4 <vfprintf+0x15c>
 592:	f8 01       	movw	r30, r16
 594:	80 81       	ld	r24, Z
 596:	89 83       	std	Y+1, r24	; 0x01
 598:	0e 5f       	subi	r16, 0xFE	; 254
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	88 24       	eor	r8, r8
 59e:	83 94       	inc	r8
 5a0:	91 2c       	mov	r9, r1
 5a2:	53 01       	movw	r10, r6
 5a4:	13 c0       	rjmp	.+38     	; 0x5cc <vfprintf+0x154>
 5a6:	28 01       	movw	r4, r16
 5a8:	f2 e0       	ldi	r31, 0x02	; 2
 5aa:	4f 0e       	add	r4, r31
 5ac:	51 1c       	adc	r5, r1
 5ae:	f8 01       	movw	r30, r16
 5b0:	a0 80       	ld	r10, Z
 5b2:	b1 80       	ldd	r11, Z+1	; 0x01
 5b4:	36 fe       	sbrs	r3, 6
 5b6:	03 c0       	rjmp	.+6      	; 0x5be <vfprintf+0x146>
 5b8:	69 2d       	mov	r22, r9
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <vfprintf+0x14a>
 5be:	6f ef       	ldi	r22, 0xFF	; 255
 5c0:	7f ef       	ldi	r23, 0xFF	; 255
 5c2:	c5 01       	movw	r24, r10
 5c4:	0e 94 28 04 	call	0x850	; 0x850 <strnlen>
 5c8:	4c 01       	movw	r8, r24
 5ca:	82 01       	movw	r16, r4
 5cc:	f3 2d       	mov	r31, r3
 5ce:	ff 77       	andi	r31, 0x7F	; 127
 5d0:	3f 2e       	mov	r3, r31
 5d2:	16 c0       	rjmp	.+44     	; 0x600 <vfprintf+0x188>
 5d4:	28 01       	movw	r4, r16
 5d6:	22 e0       	ldi	r18, 0x02	; 2
 5d8:	42 0e       	add	r4, r18
 5da:	51 1c       	adc	r5, r1
 5dc:	f8 01       	movw	r30, r16
 5de:	a0 80       	ld	r10, Z
 5e0:	b1 80       	ldd	r11, Z+1	; 0x01
 5e2:	36 fe       	sbrs	r3, 6
 5e4:	03 c0       	rjmp	.+6      	; 0x5ec <vfprintf+0x174>
 5e6:	69 2d       	mov	r22, r9
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	02 c0       	rjmp	.+4      	; 0x5f0 <vfprintf+0x178>
 5ec:	6f ef       	ldi	r22, 0xFF	; 255
 5ee:	7f ef       	ldi	r23, 0xFF	; 255
 5f0:	c5 01       	movw	r24, r10
 5f2:	0e 94 1d 04 	call	0x83a	; 0x83a <strnlen_P>
 5f6:	4c 01       	movw	r8, r24
 5f8:	f3 2d       	mov	r31, r3
 5fa:	f0 68       	ori	r31, 0x80	; 128
 5fc:	3f 2e       	mov	r3, r31
 5fe:	82 01       	movw	r16, r4
 600:	33 fc       	sbrc	r3, 3
 602:	1b c0       	rjmp	.+54     	; 0x63a <vfprintf+0x1c2>
 604:	82 2d       	mov	r24, r2
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	88 16       	cp	r8, r24
 60a:	99 06       	cpc	r9, r25
 60c:	b0 f4       	brcc	.+44     	; 0x63a <vfprintf+0x1c2>
 60e:	b6 01       	movw	r22, r12
 610:	80 e2       	ldi	r24, 0x20	; 32
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 618:	2a 94       	dec	r2
 61a:	f4 cf       	rjmp	.-24     	; 0x604 <vfprintf+0x18c>
 61c:	f5 01       	movw	r30, r10
 61e:	37 fc       	sbrc	r3, 7
 620:	85 91       	lpm	r24, Z+
 622:	37 fe       	sbrs	r3, 7
 624:	81 91       	ld	r24, Z+
 626:	5f 01       	movw	r10, r30
 628:	b6 01       	movw	r22, r12
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 630:	21 10       	cpse	r2, r1
 632:	2a 94       	dec	r2
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	82 1a       	sub	r8, r18
 638:	91 08       	sbc	r9, r1
 63a:	81 14       	cp	r8, r1
 63c:	91 04       	cpc	r9, r1
 63e:	71 f7       	brne	.-36     	; 0x61c <vfprintf+0x1a4>
 640:	e8 c0       	rjmp	.+464    	; 0x812 <vfprintf+0x39a>
 642:	84 36       	cpi	r24, 0x64	; 100
 644:	11 f0       	breq	.+4      	; 0x64a <vfprintf+0x1d2>
 646:	89 36       	cpi	r24, 0x69	; 105
 648:	41 f5       	brne	.+80     	; 0x69a <vfprintf+0x222>
 64a:	f8 01       	movw	r30, r16
 64c:	37 fe       	sbrs	r3, 7
 64e:	07 c0       	rjmp	.+14     	; 0x65e <vfprintf+0x1e6>
 650:	60 81       	ld	r22, Z
 652:	71 81       	ldd	r23, Z+1	; 0x01
 654:	82 81       	ldd	r24, Z+2	; 0x02
 656:	93 81       	ldd	r25, Z+3	; 0x03
 658:	0c 5f       	subi	r16, 0xFC	; 252
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	08 c0       	rjmp	.+16     	; 0x66e <vfprintf+0x1f6>
 65e:	60 81       	ld	r22, Z
 660:	71 81       	ldd	r23, Z+1	; 0x01
 662:	07 2e       	mov	r0, r23
 664:	00 0c       	add	r0, r0
 666:	88 0b       	sbc	r24, r24
 668:	99 0b       	sbc	r25, r25
 66a:	0e 5f       	subi	r16, 0xFE	; 254
 66c:	1f 4f       	sbci	r17, 0xFF	; 255
 66e:	f3 2d       	mov	r31, r3
 670:	ff 76       	andi	r31, 0x6F	; 111
 672:	3f 2e       	mov	r3, r31
 674:	97 ff       	sbrs	r25, 7
 676:	09 c0       	rjmp	.+18     	; 0x68a <vfprintf+0x212>
 678:	90 95       	com	r25
 67a:	80 95       	com	r24
 67c:	70 95       	com	r23
 67e:	61 95       	neg	r22
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	8f 4f       	sbci	r24, 0xFF	; 255
 684:	9f 4f       	sbci	r25, 0xFF	; 255
 686:	f0 68       	ori	r31, 0x80	; 128
 688:	3f 2e       	mov	r3, r31
 68a:	2a e0       	ldi	r18, 0x0A	; 10
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	a3 01       	movw	r20, r6
 690:	0e 94 6f 04 	call	0x8de	; 0x8de <__ultoa_invert>
 694:	88 2e       	mov	r8, r24
 696:	86 18       	sub	r8, r6
 698:	45 c0       	rjmp	.+138    	; 0x724 <vfprintf+0x2ac>
 69a:	85 37       	cpi	r24, 0x75	; 117
 69c:	31 f4       	brne	.+12     	; 0x6aa <vfprintf+0x232>
 69e:	23 2d       	mov	r18, r3
 6a0:	2f 7e       	andi	r18, 0xEF	; 239
 6a2:	b2 2e       	mov	r11, r18
 6a4:	2a e0       	ldi	r18, 0x0A	; 10
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	25 c0       	rjmp	.+74     	; 0x6f4 <vfprintf+0x27c>
 6aa:	93 2d       	mov	r25, r3
 6ac:	99 7f       	andi	r25, 0xF9	; 249
 6ae:	b9 2e       	mov	r11, r25
 6b0:	8f 36       	cpi	r24, 0x6F	; 111
 6b2:	c1 f0       	breq	.+48     	; 0x6e4 <vfprintf+0x26c>
 6b4:	18 f4       	brcc	.+6      	; 0x6bc <vfprintf+0x244>
 6b6:	88 35       	cpi	r24, 0x58	; 88
 6b8:	79 f0       	breq	.+30     	; 0x6d8 <vfprintf+0x260>
 6ba:	b5 c0       	rjmp	.+362    	; 0x826 <vfprintf+0x3ae>
 6bc:	80 37       	cpi	r24, 0x70	; 112
 6be:	19 f0       	breq	.+6      	; 0x6c6 <vfprintf+0x24e>
 6c0:	88 37       	cpi	r24, 0x78	; 120
 6c2:	21 f0       	breq	.+8      	; 0x6cc <vfprintf+0x254>
 6c4:	b0 c0       	rjmp	.+352    	; 0x826 <vfprintf+0x3ae>
 6c6:	e9 2f       	mov	r30, r25
 6c8:	e0 61       	ori	r30, 0x10	; 16
 6ca:	be 2e       	mov	r11, r30
 6cc:	b4 fe       	sbrs	r11, 4
 6ce:	0d c0       	rjmp	.+26     	; 0x6ea <vfprintf+0x272>
 6d0:	fb 2d       	mov	r31, r11
 6d2:	f4 60       	ori	r31, 0x04	; 4
 6d4:	bf 2e       	mov	r11, r31
 6d6:	09 c0       	rjmp	.+18     	; 0x6ea <vfprintf+0x272>
 6d8:	34 fe       	sbrs	r3, 4
 6da:	0a c0       	rjmp	.+20     	; 0x6f0 <vfprintf+0x278>
 6dc:	29 2f       	mov	r18, r25
 6de:	26 60       	ori	r18, 0x06	; 6
 6e0:	b2 2e       	mov	r11, r18
 6e2:	06 c0       	rjmp	.+12     	; 0x6f0 <vfprintf+0x278>
 6e4:	28 e0       	ldi	r18, 0x08	; 8
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	05 c0       	rjmp	.+10     	; 0x6f4 <vfprintf+0x27c>
 6ea:	20 e1       	ldi	r18, 0x10	; 16
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <vfprintf+0x27c>
 6f0:	20 e1       	ldi	r18, 0x10	; 16
 6f2:	32 e0       	ldi	r19, 0x02	; 2
 6f4:	f8 01       	movw	r30, r16
 6f6:	b7 fe       	sbrs	r11, 7
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <vfprintf+0x290>
 6fa:	60 81       	ld	r22, Z
 6fc:	71 81       	ldd	r23, Z+1	; 0x01
 6fe:	82 81       	ldd	r24, Z+2	; 0x02
 700:	93 81       	ldd	r25, Z+3	; 0x03
 702:	0c 5f       	subi	r16, 0xFC	; 252
 704:	1f 4f       	sbci	r17, 0xFF	; 255
 706:	06 c0       	rjmp	.+12     	; 0x714 <vfprintf+0x29c>
 708:	60 81       	ld	r22, Z
 70a:	71 81       	ldd	r23, Z+1	; 0x01
 70c:	80 e0       	ldi	r24, 0x00	; 0
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 5f       	subi	r16, 0xFE	; 254
 712:	1f 4f       	sbci	r17, 0xFF	; 255
 714:	a3 01       	movw	r20, r6
 716:	0e 94 6f 04 	call	0x8de	; 0x8de <__ultoa_invert>
 71a:	88 2e       	mov	r8, r24
 71c:	86 18       	sub	r8, r6
 71e:	fb 2d       	mov	r31, r11
 720:	ff 77       	andi	r31, 0x7F	; 127
 722:	3f 2e       	mov	r3, r31
 724:	36 fe       	sbrs	r3, 6
 726:	0d c0       	rjmp	.+26     	; 0x742 <vfprintf+0x2ca>
 728:	23 2d       	mov	r18, r3
 72a:	2e 7f       	andi	r18, 0xFE	; 254
 72c:	a2 2e       	mov	r10, r18
 72e:	89 14       	cp	r8, r9
 730:	58 f4       	brcc	.+22     	; 0x748 <vfprintf+0x2d0>
 732:	34 fe       	sbrs	r3, 4
 734:	0b c0       	rjmp	.+22     	; 0x74c <vfprintf+0x2d4>
 736:	32 fc       	sbrc	r3, 2
 738:	09 c0       	rjmp	.+18     	; 0x74c <vfprintf+0x2d4>
 73a:	83 2d       	mov	r24, r3
 73c:	8e 7e       	andi	r24, 0xEE	; 238
 73e:	a8 2e       	mov	r10, r24
 740:	05 c0       	rjmp	.+10     	; 0x74c <vfprintf+0x2d4>
 742:	b8 2c       	mov	r11, r8
 744:	a3 2c       	mov	r10, r3
 746:	03 c0       	rjmp	.+6      	; 0x74e <vfprintf+0x2d6>
 748:	b8 2c       	mov	r11, r8
 74a:	01 c0       	rjmp	.+2      	; 0x74e <vfprintf+0x2d6>
 74c:	b9 2c       	mov	r11, r9
 74e:	a4 fe       	sbrs	r10, 4
 750:	0f c0       	rjmp	.+30     	; 0x770 <vfprintf+0x2f8>
 752:	fe 01       	movw	r30, r28
 754:	e8 0d       	add	r30, r8
 756:	f1 1d       	adc	r31, r1
 758:	80 81       	ld	r24, Z
 75a:	80 33       	cpi	r24, 0x30	; 48
 75c:	21 f4       	brne	.+8      	; 0x766 <vfprintf+0x2ee>
 75e:	9a 2d       	mov	r25, r10
 760:	99 7e       	andi	r25, 0xE9	; 233
 762:	a9 2e       	mov	r10, r25
 764:	09 c0       	rjmp	.+18     	; 0x778 <vfprintf+0x300>
 766:	a2 fe       	sbrs	r10, 2
 768:	06 c0       	rjmp	.+12     	; 0x776 <vfprintf+0x2fe>
 76a:	b3 94       	inc	r11
 76c:	b3 94       	inc	r11
 76e:	04 c0       	rjmp	.+8      	; 0x778 <vfprintf+0x300>
 770:	8a 2d       	mov	r24, r10
 772:	86 78       	andi	r24, 0x86	; 134
 774:	09 f0       	breq	.+2      	; 0x778 <vfprintf+0x300>
 776:	b3 94       	inc	r11
 778:	a3 fc       	sbrc	r10, 3
 77a:	11 c0       	rjmp	.+34     	; 0x79e <vfprintf+0x326>
 77c:	a0 fe       	sbrs	r10, 0
 77e:	06 c0       	rjmp	.+12     	; 0x78c <vfprintf+0x314>
 780:	b2 14       	cp	r11, r2
 782:	88 f4       	brcc	.+34     	; 0x7a6 <vfprintf+0x32e>
 784:	28 0c       	add	r2, r8
 786:	92 2c       	mov	r9, r2
 788:	9b 18       	sub	r9, r11
 78a:	0e c0       	rjmp	.+28     	; 0x7a8 <vfprintf+0x330>
 78c:	b2 14       	cp	r11, r2
 78e:	60 f4       	brcc	.+24     	; 0x7a8 <vfprintf+0x330>
 790:	b6 01       	movw	r22, r12
 792:	80 e2       	ldi	r24, 0x20	; 32
 794:	90 e0       	ldi	r25, 0x00	; 0
 796:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 79a:	b3 94       	inc	r11
 79c:	f7 cf       	rjmp	.-18     	; 0x78c <vfprintf+0x314>
 79e:	b2 14       	cp	r11, r2
 7a0:	18 f4       	brcc	.+6      	; 0x7a8 <vfprintf+0x330>
 7a2:	2b 18       	sub	r2, r11
 7a4:	02 c0       	rjmp	.+4      	; 0x7aa <vfprintf+0x332>
 7a6:	98 2c       	mov	r9, r8
 7a8:	21 2c       	mov	r2, r1
 7aa:	a4 fe       	sbrs	r10, 4
 7ac:	10 c0       	rjmp	.+32     	; 0x7ce <vfprintf+0x356>
 7ae:	b6 01       	movw	r22, r12
 7b0:	80 e3       	ldi	r24, 0x30	; 48
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 7b8:	a2 fe       	sbrs	r10, 2
 7ba:	17 c0       	rjmp	.+46     	; 0x7ea <vfprintf+0x372>
 7bc:	a1 fc       	sbrc	r10, 1
 7be:	03 c0       	rjmp	.+6      	; 0x7c6 <vfprintf+0x34e>
 7c0:	88 e7       	ldi	r24, 0x78	; 120
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <vfprintf+0x352>
 7c6:	88 e5       	ldi	r24, 0x58	; 88
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	b6 01       	movw	r22, r12
 7cc:	0c c0       	rjmp	.+24     	; 0x7e6 <vfprintf+0x36e>
 7ce:	8a 2d       	mov	r24, r10
 7d0:	86 78       	andi	r24, 0x86	; 134
 7d2:	59 f0       	breq	.+22     	; 0x7ea <vfprintf+0x372>
 7d4:	a1 fe       	sbrs	r10, 1
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <vfprintf+0x364>
 7d8:	8b e2       	ldi	r24, 0x2B	; 43
 7da:	01 c0       	rjmp	.+2      	; 0x7de <vfprintf+0x366>
 7dc:	80 e2       	ldi	r24, 0x20	; 32
 7de:	a7 fc       	sbrc	r10, 7
 7e0:	8d e2       	ldi	r24, 0x2D	; 45
 7e2:	b6 01       	movw	r22, r12
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 7ea:	89 14       	cp	r8, r9
 7ec:	38 f4       	brcc	.+14     	; 0x7fc <vfprintf+0x384>
 7ee:	b6 01       	movw	r22, r12
 7f0:	80 e3       	ldi	r24, 0x30	; 48
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 7f8:	9a 94       	dec	r9
 7fa:	f7 cf       	rjmp	.-18     	; 0x7ea <vfprintf+0x372>
 7fc:	8a 94       	dec	r8
 7fe:	f3 01       	movw	r30, r6
 800:	e8 0d       	add	r30, r8
 802:	f1 1d       	adc	r31, r1
 804:	80 81       	ld	r24, Z
 806:	b6 01       	movw	r22, r12
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 80e:	81 10       	cpse	r8, r1
 810:	f5 cf       	rjmp	.-22     	; 0x7fc <vfprintf+0x384>
 812:	22 20       	and	r2, r2
 814:	09 f4       	brne	.+2      	; 0x818 <vfprintf+0x3a0>
 816:	42 ce       	rjmp	.-892    	; 0x49c <vfprintf+0x24>
 818:	b6 01       	movw	r22, r12
 81a:	80 e2       	ldi	r24, 0x20	; 32
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 33 04 	call	0x866	; 0x866 <fputc>
 822:	2a 94       	dec	r2
 824:	f6 cf       	rjmp	.-20     	; 0x812 <vfprintf+0x39a>
 826:	f6 01       	movw	r30, r12
 828:	86 81       	ldd	r24, Z+6	; 0x06
 82a:	97 81       	ldd	r25, Z+7	; 0x07
 82c:	02 c0       	rjmp	.+4      	; 0x832 <vfprintf+0x3ba>
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	2b 96       	adiw	r28, 0x0b	; 11
 834:	e2 e1       	ldi	r30, 0x12	; 18
 836:	0c 94 e9 04 	jmp	0x9d2	; 0x9d2 <__epilogue_restores__>

0000083a <strnlen_P>:
 83a:	fc 01       	movw	r30, r24
 83c:	05 90       	lpm	r0, Z+
 83e:	61 50       	subi	r22, 0x01	; 1
 840:	70 40       	sbci	r23, 0x00	; 0
 842:	01 10       	cpse	r0, r1
 844:	d8 f7       	brcc	.-10     	; 0x83c <strnlen_P+0x2>
 846:	80 95       	com	r24
 848:	90 95       	com	r25
 84a:	8e 0f       	add	r24, r30
 84c:	9f 1f       	adc	r25, r31
 84e:	08 95       	ret

00000850 <strnlen>:
 850:	fc 01       	movw	r30, r24
 852:	61 50       	subi	r22, 0x01	; 1
 854:	70 40       	sbci	r23, 0x00	; 0
 856:	01 90       	ld	r0, Z+
 858:	01 10       	cpse	r0, r1
 85a:	d8 f7       	brcc	.-10     	; 0x852 <strnlen+0x2>
 85c:	80 95       	com	r24
 85e:	90 95       	com	r25
 860:	8e 0f       	add	r24, r30
 862:	9f 1f       	adc	r25, r31
 864:	08 95       	ret

00000866 <fputc>:
 866:	0f 93       	push	r16
 868:	1f 93       	push	r17
 86a:	cf 93       	push	r28
 86c:	df 93       	push	r29
 86e:	fb 01       	movw	r30, r22
 870:	23 81       	ldd	r18, Z+3	; 0x03
 872:	21 fd       	sbrc	r18, 1
 874:	03 c0       	rjmp	.+6      	; 0x87c <fputc+0x16>
 876:	8f ef       	ldi	r24, 0xFF	; 255
 878:	9f ef       	ldi	r25, 0xFF	; 255
 87a:	2c c0       	rjmp	.+88     	; 0x8d4 <fputc+0x6e>
 87c:	22 ff       	sbrs	r18, 2
 87e:	16 c0       	rjmp	.+44     	; 0x8ac <fputc+0x46>
 880:	46 81       	ldd	r20, Z+6	; 0x06
 882:	57 81       	ldd	r21, Z+7	; 0x07
 884:	24 81       	ldd	r18, Z+4	; 0x04
 886:	35 81       	ldd	r19, Z+5	; 0x05
 888:	42 17       	cp	r20, r18
 88a:	53 07       	cpc	r21, r19
 88c:	44 f4       	brge	.+16     	; 0x89e <fputc+0x38>
 88e:	a0 81       	ld	r26, Z
 890:	b1 81       	ldd	r27, Z+1	; 0x01
 892:	9d 01       	movw	r18, r26
 894:	2f 5f       	subi	r18, 0xFF	; 255
 896:	3f 4f       	sbci	r19, 0xFF	; 255
 898:	31 83       	std	Z+1, r19	; 0x01
 89a:	20 83       	st	Z, r18
 89c:	8c 93       	st	X, r24
 89e:	26 81       	ldd	r18, Z+6	; 0x06
 8a0:	37 81       	ldd	r19, Z+7	; 0x07
 8a2:	2f 5f       	subi	r18, 0xFF	; 255
 8a4:	3f 4f       	sbci	r19, 0xFF	; 255
 8a6:	37 83       	std	Z+7, r19	; 0x07
 8a8:	26 83       	std	Z+6, r18	; 0x06
 8aa:	14 c0       	rjmp	.+40     	; 0x8d4 <fputc+0x6e>
 8ac:	8b 01       	movw	r16, r22
 8ae:	ec 01       	movw	r28, r24
 8b0:	fb 01       	movw	r30, r22
 8b2:	00 84       	ldd	r0, Z+8	; 0x08
 8b4:	f1 85       	ldd	r31, Z+9	; 0x09
 8b6:	e0 2d       	mov	r30, r0
 8b8:	09 95       	icall
 8ba:	89 2b       	or	r24, r25
 8bc:	e1 f6       	brne	.-72     	; 0x876 <fputc+0x10>
 8be:	d8 01       	movw	r26, r16
 8c0:	16 96       	adiw	r26, 0x06	; 6
 8c2:	8d 91       	ld	r24, X+
 8c4:	9c 91       	ld	r25, X
 8c6:	17 97       	sbiw	r26, 0x07	; 7
 8c8:	01 96       	adiw	r24, 0x01	; 1
 8ca:	17 96       	adiw	r26, 0x07	; 7
 8cc:	9c 93       	st	X, r25
 8ce:	8e 93       	st	-X, r24
 8d0:	16 97       	sbiw	r26, 0x06	; 6
 8d2:	ce 01       	movw	r24, r28
 8d4:	df 91       	pop	r29
 8d6:	cf 91       	pop	r28
 8d8:	1f 91       	pop	r17
 8da:	0f 91       	pop	r16
 8dc:	08 95       	ret

000008de <__ultoa_invert>:
 8de:	fa 01       	movw	r30, r20
 8e0:	aa 27       	eor	r26, r26
 8e2:	28 30       	cpi	r18, 0x08	; 8
 8e4:	51 f1       	breq	.+84     	; 0x93a <__stack+0x3b>
 8e6:	20 31       	cpi	r18, 0x10	; 16
 8e8:	81 f1       	breq	.+96     	; 0x94a <__stack+0x4b>
 8ea:	e8 94       	clt
 8ec:	6f 93       	push	r22
 8ee:	6e 7f       	andi	r22, 0xFE	; 254
 8f0:	6e 5f       	subi	r22, 0xFE	; 254
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	af 4f       	sbci	r26, 0xFF	; 255
 8fa:	b1 e0       	ldi	r27, 0x01	; 1
 8fc:	3e d0       	rcall	.+124    	; 0x97a <__stack+0x7b>
 8fe:	b4 e0       	ldi	r27, 0x04	; 4
 900:	3c d0       	rcall	.+120    	; 0x97a <__stack+0x7b>
 902:	67 0f       	add	r22, r23
 904:	78 1f       	adc	r23, r24
 906:	89 1f       	adc	r24, r25
 908:	9a 1f       	adc	r25, r26
 90a:	a1 1d       	adc	r26, r1
 90c:	68 0f       	add	r22, r24
 90e:	79 1f       	adc	r23, r25
 910:	8a 1f       	adc	r24, r26
 912:	91 1d       	adc	r25, r1
 914:	a1 1d       	adc	r26, r1
 916:	6a 0f       	add	r22, r26
 918:	71 1d       	adc	r23, r1
 91a:	81 1d       	adc	r24, r1
 91c:	91 1d       	adc	r25, r1
 91e:	a1 1d       	adc	r26, r1
 920:	20 d0       	rcall	.+64     	; 0x962 <__stack+0x63>
 922:	09 f4       	brne	.+2      	; 0x926 <__stack+0x27>
 924:	68 94       	set
 926:	3f 91       	pop	r19
 928:	2a e0       	ldi	r18, 0x0A	; 10
 92a:	26 9f       	mul	r18, r22
 92c:	11 24       	eor	r1, r1
 92e:	30 19       	sub	r19, r0
 930:	30 5d       	subi	r19, 0xD0	; 208
 932:	31 93       	st	Z+, r19
 934:	de f6       	brtc	.-74     	; 0x8ec <__ultoa_invert+0xe>
 936:	cf 01       	movw	r24, r30
 938:	08 95       	ret
 93a:	46 2f       	mov	r20, r22
 93c:	47 70       	andi	r20, 0x07	; 7
 93e:	40 5d       	subi	r20, 0xD0	; 208
 940:	41 93       	st	Z+, r20
 942:	b3 e0       	ldi	r27, 0x03	; 3
 944:	0f d0       	rcall	.+30     	; 0x964 <__stack+0x65>
 946:	c9 f7       	brne	.-14     	; 0x93a <__stack+0x3b>
 948:	f6 cf       	rjmp	.-20     	; 0x936 <__stack+0x37>
 94a:	46 2f       	mov	r20, r22
 94c:	4f 70       	andi	r20, 0x0F	; 15
 94e:	40 5d       	subi	r20, 0xD0	; 208
 950:	4a 33       	cpi	r20, 0x3A	; 58
 952:	18 f0       	brcs	.+6      	; 0x95a <__stack+0x5b>
 954:	49 5d       	subi	r20, 0xD9	; 217
 956:	31 fd       	sbrc	r19, 1
 958:	40 52       	subi	r20, 0x20	; 32
 95a:	41 93       	st	Z+, r20
 95c:	02 d0       	rcall	.+4      	; 0x962 <__stack+0x63>
 95e:	a9 f7       	brne	.-22     	; 0x94a <__stack+0x4b>
 960:	ea cf       	rjmp	.-44     	; 0x936 <__stack+0x37>
 962:	b4 e0       	ldi	r27, 0x04	; 4
 964:	a6 95       	lsr	r26
 966:	97 95       	ror	r25
 968:	87 95       	ror	r24
 96a:	77 95       	ror	r23
 96c:	67 95       	ror	r22
 96e:	ba 95       	dec	r27
 970:	c9 f7       	brne	.-14     	; 0x964 <__stack+0x65>
 972:	00 97       	sbiw	r24, 0x00	; 0
 974:	61 05       	cpc	r22, r1
 976:	71 05       	cpc	r23, r1
 978:	08 95       	ret
 97a:	9b 01       	movw	r18, r22
 97c:	ac 01       	movw	r20, r24
 97e:	0a 2e       	mov	r0, r26
 980:	06 94       	lsr	r0
 982:	57 95       	ror	r21
 984:	47 95       	ror	r20
 986:	37 95       	ror	r19
 988:	27 95       	ror	r18
 98a:	ba 95       	dec	r27
 98c:	c9 f7       	brne	.-14     	; 0x980 <__stack+0x81>
 98e:	62 0f       	add	r22, r18
 990:	73 1f       	adc	r23, r19
 992:	84 1f       	adc	r24, r20
 994:	95 1f       	adc	r25, r21
 996:	a0 1d       	adc	r26, r0
 998:	08 95       	ret

0000099a <__prologue_saves__>:
 99a:	2f 92       	push	r2
 99c:	3f 92       	push	r3
 99e:	4f 92       	push	r4
 9a0:	5f 92       	push	r5
 9a2:	6f 92       	push	r6
 9a4:	7f 92       	push	r7
 9a6:	8f 92       	push	r8
 9a8:	9f 92       	push	r9
 9aa:	af 92       	push	r10
 9ac:	bf 92       	push	r11
 9ae:	cf 92       	push	r12
 9b0:	df 92       	push	r13
 9b2:	ef 92       	push	r14
 9b4:	ff 92       	push	r15
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	cf 93       	push	r28
 9bc:	df 93       	push	r29
 9be:	cd b7       	in	r28, 0x3d	; 61
 9c0:	de b7       	in	r29, 0x3e	; 62
 9c2:	ca 1b       	sub	r28, r26
 9c4:	db 0b       	sbc	r29, r27
 9c6:	0f b6       	in	r0, 0x3f	; 63
 9c8:	f8 94       	cli
 9ca:	de bf       	out	0x3e, r29	; 62
 9cc:	0f be       	out	0x3f, r0	; 63
 9ce:	cd bf       	out	0x3d, r28	; 61
 9d0:	09 94       	ijmp

000009d2 <__epilogue_restores__>:
 9d2:	2a 88       	ldd	r2, Y+18	; 0x12
 9d4:	39 88       	ldd	r3, Y+17	; 0x11
 9d6:	48 88       	ldd	r4, Y+16	; 0x10
 9d8:	5f 84       	ldd	r5, Y+15	; 0x0f
 9da:	6e 84       	ldd	r6, Y+14	; 0x0e
 9dc:	7d 84       	ldd	r7, Y+13	; 0x0d
 9de:	8c 84       	ldd	r8, Y+12	; 0x0c
 9e0:	9b 84       	ldd	r9, Y+11	; 0x0b
 9e2:	aa 84       	ldd	r10, Y+10	; 0x0a
 9e4:	b9 84       	ldd	r11, Y+9	; 0x09
 9e6:	c8 84       	ldd	r12, Y+8	; 0x08
 9e8:	df 80       	ldd	r13, Y+7	; 0x07
 9ea:	ee 80       	ldd	r14, Y+6	; 0x06
 9ec:	fd 80       	ldd	r15, Y+5	; 0x05
 9ee:	0c 81       	ldd	r16, Y+4	; 0x04
 9f0:	1b 81       	ldd	r17, Y+3	; 0x03
 9f2:	aa 81       	ldd	r26, Y+2	; 0x02
 9f4:	b9 81       	ldd	r27, Y+1	; 0x01
 9f6:	ce 0f       	add	r28, r30
 9f8:	d1 1d       	adc	r29, r1
 9fa:	0f b6       	in	r0, 0x3f	; 63
 9fc:	f8 94       	cli
 9fe:	de bf       	out	0x3e, r29	; 62
 a00:	0f be       	out	0x3f, r0	; 63
 a02:	cd bf       	out	0x3d, r28	; 61
 a04:	ed 01       	movw	r28, r26
 a06:	08 95       	ret

00000a08 <_exit>:
 a08:	f8 94       	cli

00000a0a <__stop_program>:
 a0a:	ff cf       	rjmp	.-2      	; 0xa0a <__stop_program>
